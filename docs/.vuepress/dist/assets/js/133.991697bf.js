(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{484:function(v,_,e){"use strict";e.r(_);var i=e(13),l=Object(i.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"技术片段-浏览器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#技术片段-浏览器"}},[v._v("#")]),v._v(" 技术片段 - 浏览器")]),v._v(" "),_("p",[_("em",[v._v("从用户在浏览器地址栏输入网址，到看到整个页面，中间都发生了哪些事情？")])]),v._v(" "),_("div",{staticClass:"language-text line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("一个完整的HTTP请求过程如下：\n    1、用户在浏览器输入URL\n    2、域名解析（DNS的寻址）\n    3、TCP三次握手\n    4、握手成功后建立TCP通道，发起HTTP请求\n    5、服务器响应HTTP请求，返回对应的响应报文\n    6、客户端开始解析渲染\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br"),_("span",{staticClass:"line-number"},[v._v("6")]),_("br"),_("span",{staticClass:"line-number"},[v._v("7")]),_("br")])]),_("h3",{attrs:{id:"一、http请求阶段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、http请求阶段"}},[v._v("#")]),v._v(" 一、HTTP请求阶段")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("1、"),_("code",[v._v("DNS")]),v._v("解析")]),v._v(" "),_("ul",[_("li",[v._v("原因：人类容易记住域名，而计算机在网络通信过程中，无法认识域名，只能识别IP地址")]),v._v(" "),_("li",[v._v("DNS（Domain Name System）是“域名系统”的缩写。")]),v._v(" "),_("li",[v._v("工作原理：将 域名 转换为 IP地址")]),v._v(" "),_("li",[v._v("查询解析过程： 操作系统本地的hosts文件 --\x3e 本地DNS解析器缓存 --\x3e 本地DNS服务器 --\x3e 根DNS服务器")]),v._v(" "),_("li",[v._v("备注：\n"),_("ul",[_("li",[v._v("访问根DNS服务器时，会根据这个域名（比如.com）来判断是谁来授权管理，并返回一个负责该顶级域名服务器的一个IP")]),v._v(" "),_("li",[v._v("负责.com域的服务器收到请求后，如果自己无法解析，会找管理.com域的下一级DNS服务器地址("),_("code",[v._v("http://google.com")]),v._v(")给本地DNS服务器")]),v._v(" "),_("li",[v._v("不管经历几次往返查询，最终都是将结果（IP地址）返回给本地DNS服务器，由此DNS服务器再返回给客户机")]),v._v(" "),_("li",[v._v("从客户端到本地DNS服务器是属于递归查询，而DNS服务器之间的交互查询就是迭代查询")])])])])]),v._v(" "),_("li",[_("p",[v._v("2、"),_("code",[v._v("TCP")]),v._v("协议的三次握手和四次挥手")]),v._v(" "),_("ul",[_("li",[v._v("前言：http是一种建立在TCP连接基础上的通信协议，要做一次http请求，首先就是要建立TCP连接")]),v._v(" "),_("li",[_("code",[v._v("TCP")]),v._v("连接是全双工通道，要建立一条全双工的数据通道，首先确认通道双方的数据收发能力是必须的，而三次握手，做的正是这个校验的操作：\n"),_("ul",[_("li",[v._v("第一次握手：由客户端向服务端发起连接请求，服务端收到客户的请求，确认了客户端的消息发送是没有问题的")]),v._v(" "),_("li",[v._v("第二次握手：由服务端向客户端发送可以建立连接的确认消息，客户端收到后，即可确认服务端的收发都是正常的")]),v._v(" "),_("li",[v._v("第三次握手：由客户端向服务端发送确认消息，服务端收到后，即确认了客户端的接收能力是正常的，至此可以愉快的开始交流了")])])]),v._v(" "),_("li",[_("code",[v._v("TCP")]),v._v("连接验证通过（也就是说经过三次握手验证通过），并进行数据交互完成后，自然是要关闭通道，节省资源的，但关闭通道的前提是双方都要确认对方已经没有数据要发送了，所以就有了四次挥手的操作：\n"),_("ul",[_("li",[v._v("第一次挥手：由客户端1通知客户端2，己方已经没有消息要发送给客户端2了")]),v._v(" "),_("li",[v._v("第二次挥手：由客户端2通知客户端1，已收到通知")]),v._v(" "),_("li",[v._v("第三次挥手：由客户端2通知客户端1，己方已经没有消息要发送给客户端1了")]),v._v(" "),_("li",[v._v("第四次挥手：由客户端1通知客户端2，已收到通知")]),v._v(" "),_("li",[v._v("简单来说，流程是： 1 --\x3e 2， "),_("code",[v._v("2 -- 1， 2 -- 1，")]),v._v(" 1 -- 2。")])])]),v._v(" "),_("li",[v._v("经过四次挥手操作后，客户端1、2都已经确认双方不会再发送消息，随关闭通道")]),v._v(" "),_("li",[v._v("备注：\n"),_("ul",[_("li",[v._v("全双工（full-duplex）的系统允许二台设备间同时进行双向数据传输。一般的电话、手机就是全双工的系统，因为在讲话时同时也可以听到对方的声音。全双工的系统可以用一般的双向车道形容。两个方向的车辆因使用不同的车道，因此不会互相影响")])])])])]),v._v(" "),_("li",[_("p",[v._v("3、浏览器"),_("code",[v._v("HTTP")]),v._v("请求并发数和"),_("code",[v._v("TCP")]),v._v("连接的关系")]),v._v(" "),_("ul",[_("li",[v._v("当我们打开一个网页时，浏览器对网页中对http并发请求是有个数限制的。\n"),_("ul",[_("li",[v._v("限制是针对域名的，即针对同一域名（包括二级域名）在同一时间支持的并发请求数量的限制。")]),v._v(" "),_("li",[v._v("如果请求数目超出限制，则会阻塞")]),v._v(" "),_("li",[v._v("不同浏览器的默认请求数目限制不同")]),v._v(" "),_("li",[v._v("引申：有时候为了加速获取页面资源的速度，会将图片等静态资源使用不同的一级域名")])])]),v._v(" "),_("li",[v._v("浏览器与服务器建立一个TCP连接后，是否会在完成一个http请求后断开？什么条件下会断开？\n"),_("ul",[_("li",[_("code",[v._v("HTTP/1.0")]),v._v("中，如果不设置头字段"),_("code",[v._v("Connection: keep-alive")]),v._v("，一个http请求收到服务器响应后，会断开对应的"),_("code",[v._v("TCP")]),v._v("链接")]),v._v(" "),_("li",[_("code",[v._v("HTTP/1.1")]),v._v("将"),_("code",[v._v("Connection")]),v._v("写入了标准，默认值为"),_("code",[v._v("keep-alive")]),v._v("。除非强制设置为"),_("code",[v._v("Connection: close")]),v._v("，才会在请求后断开TCP连接。")]),v._v(" "),_("li",[v._v("所以，默认情况下建立的"),_("code",[v._v("TCP")]),v._v("连接不会断开。")])])]),v._v(" "),_("li",[v._v("一个TCP连接可以同时发送几个HTTP请求？\n"),_("ul",[_("li",[_("code",[v._v("HTTP/1.1")]),v._v("中，单个TCP连接，在同一时间只能处理一个http请求")]),v._v(" "),_("li",[_("code",[v._v("HTTP2")]),v._v("提供了"),_("code",[v._v("多路传输")]),v._v("功能，多个http请求，可以同时在同一个TCP连接中进行传输。")])])]),v._v(" "),_("li",[v._v("浏览器http请求的并发性是如何体现的？并发请求的数量有没有限制？\n"),_("ul",[_("li",[v._v("页面资源请求时，浏览器会同时和服务器建立多个TCP连接，在同一个TCP连接上顺序处理多个HTTP请求。所以浏览器的并发性就体现在可以建立多个TCP连接，来支持多个http同时请求。")]),v._v(" "),_("li",[v._v("Chrome浏览器最多允许对同一个域名Host建立6个TCP连接，不同的浏览器有所区别。")])])]),v._v(" "),_("li",[v._v("可以修改浏览器的默认并发连接数，可能有助于提升打开网站的速度，但是连接数也不是越大越好。")])])]),v._v(" "),_("li",[_("p",[v._v("4、"),_("code",[v._v("HTTPS")]),v._v(" 和 "),_("code",[v._v("HTTP（HTTP2）")]),v._v(" 的区别")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("时间点："),_("code",[v._v("HTTP/0.9")]),v._v("（1991年）、"),_("code",[v._v("HTTP/1.0")]),v._v("（1996年）、"),_("code",[v._v("HTTP/1.1")]),v._v("（1999年）、"),_("code",[v._v("HTTP/2.0")]),v._v("（2015年）")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("HTTP/1.0")]),v._v("与"),_("code",[v._v("HTTP/1.1")]),v._v("的区别：")]),v._v(" "),_("ul",[_("li",[v._v("缓存处理")]),v._v(" "),_("li",[v._v("带宽优化及网络连接的使用")]),v._v(" "),_("li",[v._v("错误通知的管理")]),v._v(" "),_("li",[v._v("Host头处理")]),v._v(" "),_("li",[v._v("长连接")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("HTTP/1.x")]),v._v("与"),_("code",[v._v("HTTP/2.0")]),v._v("的区别：")]),v._v(" "),_("ul",[_("li",[v._v("新的二进制格式（Binary Format）：HTTP1.x的解析是基于文本，HTTP2.0的协议解析采用二进制格式")]),v._v(" "),_("li",[v._v("多路复用（MultiPlexing）：即连接共享，即每一个request都是是用作连接共享机制的")]),v._v(" "),_("li",[v._v("header压缩：")]),v._v(" "),_("li",[v._v("服务端推送（server push）")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("HTTP")]),v._v("与"),_("code",[v._v("HTTPS")]),v._v("的区别：")]),v._v(" "),_("ul",[_("li",[v._v("HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费")]),v._v(" "),_("li",[v._v("HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的")]),v._v(" "),_("li",[v._v("HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443")]),v._v(" "),_("li",[v._v("HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题")])])]),v._v(" "),_("li",[_("p",[_("code",[v._v("HTTP")]),v._v("的基本优化：")]),v._v(" "),_("ul",[_("li",[v._v("影响一个 HTTP 网络请求的因素主要有两个：带宽和延迟")]),v._v(" "),_("li",[v._v("带宽跟网络基础建设有关")]),v._v(" "),_("li",[v._v("延迟：\n"),_("ul",[_("li",[v._v("浏览器阻塞（HOL blocking）：参考上面的浏览器请求并发数限制")]),v._v(" "),_("li",[v._v("DNS 查询（DNS Lookup）： 参考上面的"),_("code",[v._v("DNS解析")]),v._v("进行优化")]),v._v(" "),_("li",[v._v("建立连接（Initial connection）：参考上面"),_("code",[v._v("TCP")]),v._v("的三次握手和四次挥手")])])])])])])])]),v._v(" "),_("h3",{attrs:{id:"二、http响应阶段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、http响应阶段"}},[v._v("#")]),v._v(" 二、HTTP响应阶段")]),v._v(" "),_("ul",[_("li",[_("p",[_("code",[v._v("HTTP")]),v._v("状态码")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("定义："),_("code",[v._v("响应状态码")]),v._v("，用来表示一个HTTP请求是否成功。")])]),v._v(" "),_("li",[_("p",[v._v("信息型响应：")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("100 Continue")])]),v._v(" "),_("li",[_("code",[v._v("101 Switching Protocol")])]),v._v(" "),_("li",[_("code",[v._v("102 Processing (WebDAV (en-US)) 102")])]),v._v(" "),_("li",[_("code",[v._v("103 Early Hints")])])])]),v._v(" "),_("li",[_("p",[v._v("成功响应")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("200 OK")]),v._v("：请求成功")]),v._v(" "),_("li",[_("code",[v._v("201 Created")])]),v._v(" "),_("li",[_("code",[v._v("202 Accepted")])]),v._v(" "),_("li",[_("code",[v._v("203 Non-Authoritative Information")])]),v._v(" "),_("li",[_("code",[v._v("204 No Content")])]),v._v(" "),_("li",[_("code",[v._v("205 Reset Content")])]),v._v(" "),_("li",[_("code",[v._v("206 Partial Content")])]),v._v(" "),_("li",[_("code",[v._v("207 Multi-Status (WebDAV (en-US))")])]),v._v(" "),_("li",[_("code",[v._v("208 Already Reported (WebDAV (en-US))")])]),v._v(" "),_("li",[_("code",[v._v("226 IM Used (HTTP Delta encoding)")])])])]),v._v(" "),_("li",[_("p",[v._v("重定向")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("300 Multiple Choice")])]),v._v(" "),_("li",[_("code",[v._v("301 Moved Permanently")]),v._v("：被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一")]),v._v(" "),_("li",[_("code",[v._v("302 Found")]),v._v("：请求的资源现在临时从不同的 URI 响应请求")]),v._v(" "),_("li",[_("code",[v._v("303 See Other")])]),v._v(" "),_("li",[_("code",[v._v("304 Not Modified")])]),v._v(" "),_("li",[_("code",[v._v("305 Use Proxy")])]),v._v(" "),_("li",[_("code",[v._v("306 unused")]),v._v("：在最新版的规范中，306 状态码已经不再被使用")]),v._v(" "),_("li",[_("code",[v._v("307 Temporary Redirect")])]),v._v(" "),_("li",[_("code",[v._v("308 Permanent Redirect")])])])]),v._v(" "),_("li",[_("p",[v._v("客户端错误")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("400 Bad Request")]),v._v(" "),_("ul",[_("li",[v._v("语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求")]),v._v(" "),_("li",[v._v("请求参数有误")])])]),v._v(" "),_("li",[_("code",[v._v("401 Unauthorized")]),v._v("：当前请求需要用户验证")]),v._v(" "),_("li",[_("code",[v._v("402 Payment Required")])]),v._v(" "),_("li",[_("code",[v._v("403 Forbidden")]),v._v("：服务器已经理解请求，但是拒绝执行它")]),v._v(" "),_("li",[_("code",[v._v("404 Not Found")]),v._v("：请求失败，请求所希望得到的资源未被在服务器上发现")]),v._v(" "),_("li",[_("code",[v._v("405 Method Not Allowed")]),v._v("：请求行中指定的请求方法不能被用于请求相应的资源")]),v._v(" "),_("li",[_("code",[v._v("406 Not Acceptable")])]),v._v(" "),_("li",[_("code",[v._v("407 Proxy Authentication Required")])]),v._v(" "),_("li",[_("code",[v._v("408 Request Timeout")]),v._v("：请求超时")]),v._v(" "),_("li",[_("code",[v._v("409 Conflict")])]),v._v(" "),_("li",[_("code",[v._v("410 Gone")])]),v._v(" "),_("li",[_("code",[v._v("411 Length Required")])]),v._v(" "),_("li",[_("code",[v._v("412 Precondition Failed")])]),v._v(" "),_("li",[_("code",[v._v("413 Payload Too Large")])]),v._v(" "),_("li",[_("code",[v._v("414 URI Too Long")])]),v._v(" "),_("li",[_("code",[v._v("415 Unsupported Media Type")])]),v._v(" "),_("li",[_("code",[v._v("416 Range Not Satisfiable")])]),v._v(" "),_("li",[_("code",[v._v("417 Expectation Failed")])]),v._v(" "),_("li",[_("code",[v._v("418 I'm a teapot")])]),v._v(" "),_("li",[_("code",[v._v("421 Misdirected Request")])]),v._v(" "),_("li",[_("code",[v._v("422 Unprocessable Entity (WebDAV (en-US))")])]),v._v(" "),_("li",[_("code",[v._v("423 Locked (WebDAV (en-US))")])]),v._v(" "),_("li",[_("code",[v._v("424 Failed Dependency (WebDAV (en-US))")])]),v._v(" "),_("li",[_("code",[v._v("425 Too Early")])]),v._v(" "),_("li",[_("code",[v._v("426 Upgrade Required")])]),v._v(" "),_("li",[_("code",[v._v("428 Precondition Required")])]),v._v(" "),_("li",[_("code",[v._v("429 Too Many Requests")])]),v._v(" "),_("li",[_("code",[v._v("431 Request Header Fields Too Large")])]),v._v(" "),_("li",[_("code",[v._v("451 Unavailable For Legal Reasons")])])])]),v._v(" "),_("li",[_("p",[v._v("服务端错误")]),v._v(" "),_("ul",[_("li",[_("code",[v._v("500 Internal Server Error")]),v._v("：服务器遇到了不知道如何处理的情况")]),v._v(" "),_("li",[_("code",[v._v("501 Not Implemented")]),v._v("：此请求方法不被服务器支持且无法被处理")]),v._v(" "),_("li",[_("code",[v._v("502 Bad Gateway")]),v._v("：此错误响应表明服务器作为网关需要得到一个处理这个请求的响应，但是得到一个错误的响应")]),v._v(" "),_("li",[_("code",[v._v("503 Service Unavailable")]),v._v("：服务器没有准备好处理请求")]),v._v(" "),_("li",[_("code",[v._v("504 Gateway Timeout")]),v._v("：当服务器作为网关，不能及时得到响应时返回此错误代码")]),v._v(" "),_("li",[_("code",[v._v("505 HTTP Version Not Supported")])]),v._v(" "),_("li",[_("code",[v._v("506 Variant Also Negotiates")])]),v._v(" "),_("li",[_("code",[v._v("507 Insufficient Storage")])]),v._v(" "),_("li",[_("code",[v._v("508 Loop Detected (WebDAV (en-US))")])]),v._v(" "),_("li",[_("code",[v._v("510 Not Extended")])]),v._v(" "),_("li",[_("code",[v._v("511 Network Authentication Required")])])])]),v._v(" "),_("li",[_("p",[v._v("参考： https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status")])])])]),v._v(" "),_("li",[_("p",[v._v("当响应完成之后，就会通过四次挥手关闭连接，至此响应阶段结束")])]),v._v(" "),_("li",[_("p",[_("code",[v._v("HTTP")]),v._v("报文")])])]),v._v(" "),_("h3",{attrs:{id:"三、浏览器渲染阶段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、浏览器渲染阶段"}},[v._v("#")]),v._v(" 三、浏览器渲染阶段")]),v._v(" "),_("div",{staticClass:"language-text line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("浏览器的解析渲染流程，简单来说，如下所示：\n    1、第一次自上而下走完后，只生成`DOM树`\n    2、CSS处理完成生成`CSSOM`\n    3、`DOM树 + CSSOM`，合并生成`Render Tree渲染树`\n    4、CPU根据`Render Tree渲染树`进行页面绘图\n    5、备注：构建DOM的过程中，如果碰到script标签时，会先执行js脚本，然后再继续构建DOM\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br"),_("span",{staticClass:"line-number"},[v._v("6")]),_("br")])]),_("ul",[_("li",[_("p",[v._v("进程 Process")]),v._v(" "),_("ul",[_("li",[v._v("是计算机中已运行程序的实体")]),v._v(" "),_("li",[v._v("浏览器是多进程的\n"),_("ul",[_("li",[v._v("1、Browser进程")]),v._v(" "),_("li",[v._v("2、第三方插件进程")]),v._v(" "),_("li",[v._v("3、GPU进程")]),v._v(" "),_("li",[v._v("4、浏览器渲染进程（浏览器内核）（Renderer进程，内部是多线程的）")])])]),v._v(" "),_("li",[v._v("简单来说，就是在浏览器中打开一个网页相当于新起了一个进程（进程内有自己的多线程）")])])]),v._v(" "),_("li",[_("p",[v._v("线程 Thread")]),v._v(" "),_("ul",[_("li",[v._v("是操作系统能够进行运算调度的最小单位")]),v._v(" "),_("li",[v._v("它被包含在进程之中，是进程中的实际运作单位")]),v._v(" "),_("li",[v._v("一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并行多个线程，每条线程并行执行不同的任务")]),v._v(" "),_("li",[v._v("浏览器的"),_("code",[v._v("渲染进程")]),v._v("：\n"),_("ul",[_("li",[v._v("1、GUI渲染线程：负责渲染浏览器界面，解析HTML，CSS，构建DOM树和RenderObject树，布局和绘制等")]),v._v(" "),_("li",[v._v("2、JS引擎线程：也称为JS内核，负责处理Javascript脚本程序\n"),_("ul",[_("li",[v._v("注意："),_("code",[v._v("GUI渲染线程")]),v._v("与"),_("code",[v._v("JS引擎线程")]),v._v("是"),_("code",[v._v("互斥")]),v._v("的")]),v._v(" "),_("li",[v._v("所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞")])])]),v._v(" "),_("li",[v._v("3、事件触发线程：归属于浏览器而不是JS引擎，用来控制事件循环。比如执行代码块"),_("code",[v._v("setTimeOut")]),v._v("、鼠标点击事件和Ajax异步请求等")])])])])]),v._v(" "),_("li",[_("p",[v._v("栈内存 Stack")]),v._v(" "),_("ul",[_("li",[v._v("主要用于存放基本类型和对象变量的指针")]),v._v(" "),_("li",[v._v("后进先出（LIFO）")])])]),v._v(" "),_("li",[_("p",[v._v("解析JS代码：")]),v._v(" "),_("ul",[_("li",[v._v("JS分为同步任务和异步任务")]),v._v(" "),_("li",[v._v("同步任务都在主线程上执行，形成一个执行栈")]),v._v(" "),_("li",[v._v("主线程之外，事件触发线程管理着一个任务队列，即"),_("code",[v._v("Task queue任务队列")])]),v._v(" "),_("li",[v._v("注意: 总是要等待栈（主线程）中的代码执行完毕后才会去读取事件队列中的事件")])])])]),v._v(" "),_("p",[v._v("备注： 浏览器的"),_("code",[v._v("渲染进程")]),v._v("是"),_("code",[v._v("多线程")]),v._v("的，js是单线程的")]),v._v(" "),_("ul",[_("li",[_("p",[_("em",[v._v("1、拿到服务器的响应代码后：浏览器在内存条中开辟出一块栈内存，用来给代码的执行提供环境")])])]),v._v(" "),_("li",[_("p",[_("em",[v._v("2、同时分配一个主线程去一行行的解析和执行代码")])])]),v._v(" "),_("li",[_("p",[_("em",[v._v("3、当浏览器遇到link/script/img等请求时，都会开辟全新的线程去加载资源文件")])]),v._v(" "),_("ul",[_("li",[v._v("开辟全新的线程会产生 "),_("code",[v._v("Task queue任务队列")])])])]),v._v(" "),_("li",[_("p",[_("em",[v._v("4、第一次自上而下走完后，只生成"),_("code",[v._v("DOM树")])])])]),v._v(" "),_("li",[_("p",[_("em",[v._v("5、CSS处理完成生成"),_("code",[v._v("CSSOM")])])]),v._v(" "),_("ul",[_("li",[v._v("js和css可以并行加载，但是还是需要等待js执行完毕后，才能继续解析剩余等DOM")]),v._v(" "),_("li",[v._v("css放顶部：防止页面重绘")]),v._v(" "),_("li",[v._v("js放底部：防止阻塞DOM渲染")])])]),v._v(" "),_("li",[_("p",[_("em",[v._v("6、"),_("code",[v._v("DOM树 + CSSOM")]),v._v("，合并生成"),_("code",[v._v("Render Tree渲染树")])])]),v._v(" "),_("ul",[_("li",[v._v("Layout（回流）：根据生成的渲染树，计算它们在设备视口（viewport）内的确切位置和大小，这个计算的阶段就是回流。\n"),_("ul",[_("li",[v._v("放弃传统操作DOM的时代，基于vue/react开始数据影响视图模式： mvvm/mvc/(virtual dom)/(dom diff)...")]),v._v(" "),_("li",[v._v("分离读写操作（现代的浏览器都有渲染队列的机制）")]),v._v(" "),_("li",[v._v("样式集中改变（批量处理）")])])]),v._v(" "),_("li",[v._v("Painting（重绘）：根据渲染树以及回流得到的几何信息，得到节点的绝对像素")]),v._v(" "),_("li",[v._v("Display：将像素发送给GPU，展示到页面上")]),v._v(" "),_("li",[v._v("注意：回流一定会触发重绘，但是重绘不一定会回流")])])]),v._v(" "),_("li",[_("p",[_("em",[v._v("7、CPU根据"),_("code",[v._v("Render Tree渲染树")]),v._v("进行页面绘图")])])]),v._v(" "),_("li",[_("p",[_("em",[v._v("8、Event Loop 事件循环（找Task queue任务队列中的任务，将完成的任务插入主线程）")])])]),v._v(" "),_("li",[_("p",[_("em",[v._v("9、"),_("code",[v._v("微任务（microtask）")]),v._v("和"),_("code",[v._v("宏任务（macrotask）")])])]),v._v(" "),_("ul",[_("li",[v._v("在ECMAScript中，microtask称为jobs，macrotask可称为task")]),v._v(" "),_("li",[_("code",[v._v("微任务（microtask）")]),v._v("：Promise，process.nextTick等")]),v._v(" "),_("li",[_("code",[v._v("宏任务（macrotask）")]),v._v("：主代码块，setTimeout，setInterval等")]),v._v(" "),_("li",[v._v("在当前的微任务没有执行完成时，是不会执行下一个宏任务的")]),v._v(" "),_("li",[v._v("同一层级下，微任务永远比宏任务先执行，即Promise.then比setTimeout先执行")])])]),v._v(" "),_("li",[_("p",[_("em",[v._v("10、性能优化：减少HTTP的请求次数以及大小")])]),v._v(" "),_("ul",[_("li",[v._v("资源合并压缩")]),v._v(" "),_("li",[v._v("图片懒加载")]),v._v(" "),_("li",[v._v("音视频走流文件 - m3u8")]),v._v(" "),_("li",[v._v("DNS/304缓存")]),v._v(" "),_("li",[v._v("......")])])])])])}),[],!1,null,null,null);_.default=l.exports}}]);